package com.example

import com.example.config.ApiConfig
import com.example.service.AnswerMode
import com.example.service.DeepSeekLlmService
import kotlinx.coroutines.delay
import kotlinx.coroutines.runBlocking
import java.util.Scanner

/**
 * Главная функция приложения
 *
 * Приложение принимает промт от пользователя через стандартный ввод,
 * отправляет его параллельно в Z.ai и DeepSeek API,
 * и выводит результаты в терминал.
 */
fun main() = runBlocking {
    try {
        // Инициализация компонентов
        val zaiApiKey = ApiConfig.getApiKeys()
        val zAiService = DeepSeekLlmService(zaiApiKey)
        val scanner = Scanner(System.`in`, "UTF-8")

        // Запрос промта от пользователя
        //print("\nВведите ваш запрос: ")
        var prompt = ""
        //prompt = scanner.nextLine().trim()
//        prompt =
//            "В магазине продаются 2-х колесные и 3-х колесные велосипеды.У них вместе 7 рулей и 18 колёс. " +
//                    " Сколько было 2-х и 3-х колёсных велосипедов?"
//
//        prompt =
//            "Имеется 16 конфет. Как разделить их между Колей и Петей, чтобы у Коли было на две конфеты больше, чем у Пети?"
//
//        prompt = "У Лёвы, Гены, Васи, Толи и Миши были три барабана и две трубы. " +
//                "Какой музыкальный инструмент был у каждого мальчика, если у Гены, Левы и Миши были одинаковые инструменты?"
//
//        prompt =
//            "Книга стоит один доллар плюс половину стоимости книги. Сколько долларов стоит книга?"
//
//        prompt =
//            "Два года назад возраст брата плюс возраст сестры равнялся 15 годам. Сейчас сестре 13 лет. Сколько должно пройти лет, чтобы брату исполнилось 9 лет?"
//
//        prompt =
//            "В городе живут два типа жителей: лжецы, которые всегда лгут и рыцари, которые всегда говорят правду. Путешественник встретил двух жителей города. Первый из них сказал: как минимум один из нас лжец. Кто из двух жителей лжец, а кто рыцарь?"

        prompt =
            "На улице стоят пять складов.\n" +
                    "Каменщик работает в зеленом складе.\n" +
                    "У портного есть леопард.\n" +
                    "На желтом складе едят котлету.\n" +
                    "Электрик ест хлеб.\n" +
                    "Желтый склад стоит сразу справа от синего склада.\n" +
                    "Тот, кто пьет коньяк разводит пуму.\n" +
                    "В белом складе пьют вино.\n" +
                    "В центральном складе едят пельмени.\n" +
                    "Плотник работает на первом складе.\n" +
                    "Сосед того, кто пьет водку, держит медведя.\n" +
                    "На складе по соседству с тем, в котором держат тигра, пьют вино.\n" +
                    "Тот, кто пьет виски, ест макароны.\n" +
                    "Программист пьет ром.\n" +
                    "Плотник работает рядом с красным складом.\n" +
                    "\n" +
                    "Кто ест пиццу? Кто держит крокодила?" +
                    "Для решения попробуй составить таблицу"


        if (prompt.isBlank()) {
            println("Ошибка: Пустой запрос. Приложение завершает работу.")
            return@runBlocking
        }

        //println("Задача: $prompt")
        println()
        // Параллельная отправка запросов и получение результатов
        AnswerMode.entries.forEach {
            println("Отправляем запрос для *${it.alias.uppercase()}* ответа")
            val result = zAiService.generateWithOpenAI(prompt, it)
            println(result)
            println("==================================")
            println("==================================")
            println()
            println()
            delay(1000)
        }
    } catch (e: IllegalStateException) {
        // Ошибка конфигурации (отсутствующие API ключи)
        println("Ошибка конфигурации")
        e.printStackTrace()
    } catch (e: Exception) {
        // Общие ошибки
        println("Произошла неожиданная ошибка")
        e.printStackTrace()
    }
}
