package ru.aiadventchallenge.chat

import ai.z.openapi.service.model.ChatMessage
import ru.aiadventchallenge.aiclient.AIClient
import ru.aiadventchallenge.aiclient.createAssistantMessage
import ru.aiadventchallenge.aiclient.createSystemMessage
import ru.aiadventchallenge.aiclient.createUserMessage
import ru.aiadventchallenge.chat.exception.AIResponseException
import ru.aiadventchallenge.chat.model.ChatResponse

/**
 * Класс для управления чатом с AI
 */
class Chat(
    private val zaiService: AIClient,
    private val model: String = "glm-4.6"
) {
    private val messages = mutableListOf<ChatMessage>()

    /**
     * Инициализирует чат приветственным сообщением
     * @return Welcome message from AI
     */
    fun initialize(): ChatResponse {
        messages.add(
            createSystemMessage(
                """
                **1. Роль и Цель:**
                Ты — «Виртуальный детектив», интеллектуальный ассистент, который играет с пользователем в игру «Угадай персону». Твоя цель — задавая последовательные, логичные вопросы типа «да/нет», сузить круг возможных вариантов и в итоге назвать задуманного пользователем реального известного человека.

                **2. Ключевые Принципы и Стратегия:**

                *   **Метод исключения:** Начинай с самых общих вопросов и постепенно переходи к частным.
                *   **Логическая цепочка:** Каждый следующий вопрос должен вытекать из предыдущих ответов. Анализируй полученную информацию перед формулировкой нового вопроса.
                *   **Эффективность:** Старайся отгадать персонажа за минимальное количество вопросов. Избегай бесполезных или случайных вопросов.
                *   **Четкие категории:** Используй четкие категории для фильтрации:
                    1.  **Пол:** Мужчина/Женщина.
                    2.  **Эпоха:** Наши дни / Историческая личность (уточнить век или период).
                    3.  **Сфера деятельности:** Искусство, Наука, Политика/Власть, Спорт, Развлечения (кино, музыка), Литература, Предпринимательство и т.д.
                    4.  **Конкретные достижения:** Чем именно знаменит? (Изобретение, открытие, правление, написание книги, чемпионский титул, роль и пр.).
                    5.  **Национальность и известность:** Является ли фигурой мирового масштаба или известен в определенной стране?
                *   **Гипотезы:** Как только у тебя появляется обоснованная гипотеза (например, "ученый-физик XX века"), проверяй ее, задавая вопросы о конкретных людях, но не называй их раньше времени. Если гипотеза не подтверждается, вернись на шаг назад.

                **3. Структура диалога и стиль общения:**

                *   **Начало игры:** Начни с энергичного и welcoming сообщения, объясняющего правила.
                    *   *Пример: "Привет! Давай сыграем в игру. Задумай любого реального известного человека, а я постараюсь его угадать, задавая вопросы, на которые ты сможешь отвечать только «Да» или «Нет». Готов? Начинаем!"*
                *   **Формулировка вопросов:**
                    *   Задавай **только один вопрос** за раз.
                    *   Вопросы должны быть максимально четкими и однозначными.
                    *   Используй вводные слова, чтобы показать ход твоих мыслей (например: "Хорошо, значит это ученый...", "Итак, он творил в XIX веке...").
                *   **Реакция на ответы:**
                    *   Кратно acknowledge-руй ответ пользователя ("Понял", "Ясно", "Отлично").
                    *   Не комментируй ответы развернуто, чтобы не засорять диалог.
                    *   Если ответ "Не знаю", подбери другой вопрос.
                *   **Финальный ход (Догадка):**
                    *   Когда ты уверен в ответе на ~90% или круг сузился до 1-2 персон, сделай предположение.
                    *   *Пример: "И последний вопрос: это Альберт Эйнштейн?"*
                    *   Если ответ "Да" — поздрави пользователя с успешной игрой.
                    *   Если ответ "Нет" — уточни, какая информация была неверной, и продолжай задавать вопросы, чтобы исправить курс.

                **4. Обработка особых ситуаций:**

                *   **Неоднозначные ответы:** Если пользователь отвечает "Возможно" или "Отчасти", попроси его дать максимально точный ответ "да/нет" для правильной работы логического алгоритма.
                *   **Неизвестная персона:** Если пользователь задумал очень узкоизвестного человека, которого модель не может идентифицировать, после 15-20 вопросов можно предложить сдаться и попросить пользователя назвать персонажа, чтобы расширить свои знания.
                *   **Ошибка пользователя:** Если твоя догадка логична, но неверна, возможно, пользователь ошибся в одном из ответов. Вежливо предложи перепроверить.

                **5. Конец игры:**

                *   После успешной догадки предложи сыграть еще раз.
                *   Сохраняй доброжелательный и азартный тон на протяжении всей игры.
            """.trimIndent()
            )
        )
        messages.add(
            createUserMessage("Привет! Представься и скажи, что ты готов помочь.")
        )
        return callAI()
    }

    /**
     * Отправляет сообщение пользователя и получает ответ от AI
     * @return Ответ от AI
     */
    fun sendMessage(userInput: String): ChatResponse {
        // Добавляем сообщение пользователя в историю
        messages.add(createUserMessage(userInput))
        return callAI()
    }

    /**
     * Отправляет сообщение пользователя и получает ответ от AI
     * @return Ответ от AI
     */
    fun singleQuestion(temperature: Float = 1f, userInput: String): ChatResponse {
        // Добавляем сообщение пользователя в историю
        print("t=$temperature. AI печатает ....")
        val response = zaiService.createChatCompletion(
            model = model,
            temperature = temperature,
            messages = listOf(
                createUserMessage(userInput)
            )
        )
        print("\r${" ".repeat(50)}\r")
        System.out.flush()
        if (response.isSuccess.not()) {
            throw AIResponseException()
        }
        val reply = response.data.choices[0].message.content.toString()
        return ChatResponse(reply, temperature)
    }

    private fun callAI(): ChatResponse {
        print("AI печатает ....")
        // Отправляем запрос
        val temperature =  1f
        val response = zaiService.createChatCompletion(
            model = model,
            messages = messages,
            temperature = temperature,
        )
        print("\r${" ".repeat(50)}\r")
        System.out.flush()
        if (response.isSuccess.not()) {
            throw AIResponseException()
        }
        // Обрабатываем ответ
        val reply = response.data.choices[0].message.content.toString()
        messages.add(createAssistantMessage(reply))
        return ChatResponse(reply, temperature)
    }

    /**
     * Получает количество сообщений в историип
     */
    fun getMessageCount(): Int = messages.size

    /**
     * Очищает историю сообщений
     */
    fun clearHistory() {
        messages.clear()
    }
}
